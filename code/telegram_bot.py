import telebot
from telebot import types
from code.config import get_telegram_token
from code.db import get_db_connection, rebuild_db
from code.schedule import init_schedule_ptk, get_schedule_ptk, init_send_schedule
from bs4 import BeautifulSoup as BS
import requests

bot = telebot.TeleBot(get_telegram_token())

days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±']

user_context = {}
group = []

cur = None
group_student = None
day_of_week = None
week_type = None
college = None
course = None

def init_list_group(first_group_number, table_name, list_group, cur):
    course = 1
    for num_group in list_group:
        temp = int(num_group) // 1000
        if (first_group_number != temp):
            course += 1
            first_group_number = temp
        cur.execute("INSERT INTO {} VALUES (%s, %s)".format(table_name),
                    (course, num_group))

def init_list_groups(soup, cur):
    substring_ptk = "/npe/files/_timetable/ptk/"
    substring_pedcol = "/npe/files/_timetable/pedcol/"
    substring_medcol = "/npe/files/_timetable/medcol/"
    substring_spour = "/npe/files/_timetable/spour/"
    substring_spoinpo = "/npe/files/_timetable/spoinpo/"
    
    list_group_ptk, list_group_pedcol, list_group_medcol = [], [], []
    list_group_spour, list_group_spoinpo = [], []
    
    list_groups = soup.find_all('a')
    for element in list_groups:
        if substring_ptk in str(element) and '_' not in element.get_text(): 
            list_group_ptk.append(element.get_text())
        elif substring_pedcol in str(element) and '_' not in element.get_text():
            list_group_pedcol.append(element.get_text())
        elif substring_medcol in str(element) and '_' not in element.get_text():
            list_group_medcol.append(element.get_text())
        elif substring_spour in str(element) and '_' not in element.get_text():
            list_group_spour.append(element.get_text())
        elif substring_spoinpo in str(element) and ('_' and 'o' not in element.get_text()):
            list_group_spoinpo.append(element.get_text())
            
    first_group_number = int(list_group_ptk[0]) // 1000
    while first_group_number > 9:
        first_group_number %= 10
    init_list_group(first_group_number, 'groups_students_ptk', list_group_ptk, cur)
    init_list_group(first_group_number, 'groups_students_pedcol', list_group_pedcol, cur)
    init_list_group(first_group_number, 'groups_students_medcol', list_group_medcol, cur)
    init_list_group(first_group_number, 'groups_students_spour', list_group_spour, cur)
    init_list_group(first_group_number, 'groups_students_spoinpo', list_group_spoinpo, cur)

def init_get_list_group(college, cur):
    cur.execute('SELECT group_id FROM {}'.format(college))
    temp = cur.fetchall()
    for item in temp:
        group.append(item[0])

@bot.message_handler(commands=['start'])
def main_menu(message):
    markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_geolacation = types.KeyboardButton('–£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é')
    item_schedule = types.KeyboardButton('–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    markup_replay.add(item_schedule, item_geolacation)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?',
                     reply_markup=markup_replay)


def show_groups(message, college):
    markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
    group_student = message.text
    cur.execute("SELECT group_id FROM {} WHERE group_course=%s".format(college), group_student[0])
    temp = cur.fetchall()
    temp_items = []
    for item in temp:
        temp_items.append(types.KeyboardButton(item[0]))
    markup_replay.add(*temp_items)
    item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup_replay.add(item_back)
    bot.send_message(message.chat.id, 'üìù–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É', reply_markup=markup_replay)

@bot.message_handler(content_types=['text'])
def bot_massage(message):
    global group, group_student, week_type, college, course
    
    if message.chat.type == 'private':
        if '–£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é' in message.text:
            markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_glav = types.KeyboardButton('–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å')
            item_ptk = types.KeyboardButton('–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–ª–ª–µ–¥–∂')
            item_anton = types.KeyboardButton('–ê–Ω—Ç–æ–Ω–æ–≤–æ')
            item_itys = types.KeyboardButton('–ò–¶–≠–£–°')
            item_ibhi = types.KeyboardButton('–ò–ë–•–ò')
            item_med = types.KeyboardButton('–ò–ú–û')
            item_ped = types.KeyboardButton('–ü–ò')
            item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_replay.add(item_glav, item_ptk, item_anton, item_itys,
                              item_ibhi, item_med, item_ped, item_back)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç',
                             reply_markup=markup_replay)

        elif message.text == '–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å':
            bot_send_location_and_message(bot, message, 58.542306, 31.261174, 
                                          'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ì–ª–∞–≤–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞: –ë–æ–ª—å—à–∞—è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∞—è, 41')

        elif message.text == '–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–ª–ª–µ–¥–∂':
            bot_send_location_and_message(bot, message, 58.541668, 31.264534, 
                                         'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ü–¢–ö: –ë–æ–ª—å—à–∞—è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∞—è, 46')

        elif message.text == '–ê–Ω—Ç–æ–Ω–æ–≤–æ':
            bot_send_location_and_message(bot, message, 58.541079, 31.288108, 
                                          'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ò–ì–£–ú: —Ä–∞–π–æ–Ω –ê–Ω—Ç–æ–Ω–æ–≤–æ, 1')

        elif message.text == '–ò–¶–≠–£–°':
            bot_send_location_and_message(bot, message, 58.522347, 31.258228, 
                                          'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ò–¶–≠–£–°: –ü—Å–∫–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 3')

        elif message.text == '–ò–ú–û':
            bot_send_location_and_message(bot, message, 58.542809, 31.310567, 
                                          'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ò–ú–û: —É–ª–∏—Ü–∞ –î–µ—Ä–∂–∞–≤–∏–Ω–∞, 6')

        elif message.text == '–ò–ë–•–ò':
            bot_send_location_and_message(bot, message, 58.551745, 31.300628, 
                                          'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ò–ë–•–ò: —É–ª–∏—Ü–∞ –°–æ–≤–µ—Ç—Å–∫–æ–π –ê—Ä–º–∏–∏, 7')

        elif message.text == '–ü–ò':
            bot_send_location_and_message(bot, message, 58.523945, 31.262243, 
                                          'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ü–ò: —É–ª–∏—Ü–∞ –ß–µ—Ä–Ω—è—Ö–æ–≤—Å–∫–æ–≥–æ, 64/6')

        elif message.text == '–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_PTK = types.KeyboardButton('–ü–¢–ö')
            item_MED = types.KeyboardButton('–ú–µ–¥.–∫–æ–ª–ª–µ–¥–∂')
            item_EKO = types.KeyboardButton('–°–ü–û –ò–¶–≠–£–°')
            item_IUR = types.KeyboardButton('–°–ü–û –ò–Æ–†')
            item_PED = types.KeyboardButton('–°–ü–û –ò–ù–ü–û')
            item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_replay.add(item_PTK, item_PED, item_IUR, item_MED, item_EKO, item_back)
            bot.send_message(message.chat.id, 'üè´–ö–∞–∫–æ–π –∫–æ–ª–ª–µ–¥–∂ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                             reply_markup=markup_replay)

        elif message.text == '–ü–¢–ö':
            college = message.text
            print('college = ' + college)
            user_context[message.chat.id] = message.text
            markup_replay = generate_course_menu('ptk')
            bot.send_message(message.chat.id, '‚ùì –ö–∞–∫–æ–π –≤—ã –∫—É—Ä—Å?', reply_markup=markup_replay)

        elif message.text == '–°–ü–û –ò–ù–ü–û':
            college = message.text
            print('college = ' + college)
            user_context[message.chat.id] = message.text
            markup_replay = generate_course_menu('spoinpo')
            bot.send_message(message.chat.id, '‚ùì –ö–∞–∫–æ–π –≤—ã –∫—É—Ä—Å?', reply_markup=markup_replay)

        elif message.text == '–ú–µ–¥.–∫–æ–ª–ª–µ–¥–∂':
            # markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            # item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            # markup_replay.add(item_back)
            # bot.send_message(message.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.',
            #                  reply_markup=markup_replay)
            college = message.text
            print('college = ' + college)
            user_context[message.chat.id] = message.text
            markup_replay = generate_course_menu('medcol')
            bot.send_message(message.chat.id, '‚ùì –ö–∞–∫–æ–π –≤—ã –∫—É—Ä—Å?', reply_markup=markup_replay)
            
        elif message.text == '–°–ü–û –ò–¶–≠–£–°':
            college = message.text
            print('college = ' + college)
            user_context[message.chat.id] = message.text
            markup_replay = generate_course_menu('pedcol')
            bot.send_message(message.chat.id, '‚ùì –ö–∞–∫–æ–π –≤—ã –∫—É—Ä—Å?', reply_markup=markup_replay)

        elif message.text == '–°–ü–û –ò–Æ–†':
            college = message.text
            print('college = ' + college)
            user_context[message.chat.id] = message.text
            markup_replay = generate_course_menu('spour')
            bot.send_message(message.chat.id, '‚ùì –ö–∞–∫–æ–π –≤—ã –∫—É—Ä—Å?', reply_markup=markup_replay)
        
        elif message.text == '1 –∫—É—Ä—Å':
            current_context = user_context.get(message.chat.id)
            if current_context == '–ü–¢–ö':
                show_groups(message, 'groups_students_ptk')

            elif current_context == '–°–ü–û –ò–ù–ü–û':
                show_groups(message, 'groups_students_spoinpo')

        elif message.text == '2 –∫—É—Ä—Å':
            current_context = user_context.get(message.chat.id)
            if current_context == '–ü–¢–ö':
                show_groups(message, 'groups_students_ptk')
                
            elif current_context == '–°–ü–û –ò–ù–ü–û':
                show_groups(message, 'groups_students_spoinpo')

        elif message.text == '3 –∫—É—Ä—Å':
            current_context = user_context.get(message.chat.id)
            if current_context == '–ü–¢–ö':
                show_groups(message, 'groups_students_ptk')

            elif current_context == '–°–ü–û –ò–ù–ü–û':
                show_groups(message, 'groups_students_spoinpo')

        elif message.text == '4 –∫—É—Ä—Å':
            current_context = user_context.get(message.chat.id)
            if current_context == '–ü–¢–ö':
                show_groups(message, 'groups_students_ptk')

            elif current_context == '–°–ü–û –ò–ù–ü–û':
                show_groups(message, 'groups_students_spoinpo')
                
        elif message.text == '5 –∫—É—Ä—Å':
            current_context = user_context.get(message.chat.id)
            if current_context == '–ü–¢–ö':
                show_groups(message, 'groups_students_ptk')

            elif current_context == '–°–ü–û –ò–ù–ü–û':
                show_groups(message, 'groups_students_spoinpo')
                
        elif message.text == '6 –∫—É—Ä—Å':
            current_context = user_context.get(message.chat.id)
            if current_context == '–ü–¢–ö':
                show_groups(message, 'groups_students_ptk')

            elif current_context == '–°–ü–û –ò–ù–ü–û':
                show_groups(message, 'groups_students_spoinpo')

        elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_geolacation = types.KeyboardButton('–£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é')
            item_schedule = types.KeyboardButton('–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            markup_replay.add(item_schedule, item_geolacation)
            bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                             reply_markup=markup_replay)

        elif message.text.isdigit():
            
            if message.text in group:
                group_student = message.text
                markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item_pn = types.KeyboardButton('–í–µ—Ä—Ö–Ω—è—è')
                item_vt = types.KeyboardButton('–ù–∏–∂–Ω—è—è')
                item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                markup_replay.add(item_pn, item_vt, item_back)
                bot.send_message(message.chat.id, '‚ùóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é',
                                 reply_markup=markup_replay)
            else:
                bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')

        elif message.text == '–í–µ—Ä—Ö–Ω—è—è':
            markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            week_type = message.text
            markup_replay.add(*days, types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            bot.send_message(message.chat.id, 'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                             reply_markup=markup_replay)

        elif message.text == '–ù–∏–∂–Ω—è—è':
            markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            week_type = message.text
            markup_replay.add(*days, types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            bot.send_message(message.chat.id, 'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                             reply_markup=markup_replay)

        elif message.text in days:
            day_of_week = message.text
            print(college)
            if college == '–ü–¢–ö':
                schedule = get_schedule_ptk(group_student, day_of_week, week_type)
                if schedule is None:
                    bot.send_message(message.chat.id, '–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π')
                else:
                    bot.send_message(message.chat.id, f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_of_week}, –Ω–µ–¥–µ–ª—è - {week_type}, –≥—Ä—É–ø–ø–∞ -  {group_student}:\n' + '\n'.join(schedule))
            elif college == '–°–ü–û –ò–ù–ü–û':
                print('–ò–ù–ü–û')

        else:
            markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_replay.add(item_back)
            bot.send_message(message.chat.id, '‚ö†Ô∏è–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.\n–°–ª–µ–¥—É–π—Ç–µ –∫–Ω–æ–ø–∫–∞–º –º–µ–Ω—é!‚ö†Ô∏è',
                             reply_markup=markup_replay)

def bot_send_location_and_message(bot, message, latitude, longitude, str):
    bot.send_location(message.chat.id, latitude, longitude)
    bot.send_message(message.chat.id, str)

def fetch_group_ids(cur, table_name, group_list):
    cur.execute(f'SELECT group_id FROM {table_name}')
    
    temp = cur.fetchall()
    for item in temp:
        group_list.append(item[0])
    
def fetch_college_courses(cur, table_college_name):
    course_list = []
    cur.execute(f'SELECT DISTINCT group_course FROM groups_students_{table_college_name}')
    temp = cur.fetchall()
    for item in temp:
        course_list.append(item[0])
    return course_list

def generate_course_menu(college):
    markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
    course_list = sorted(fetch_college_courses(cur, college))
    
    for course in course_list:
        markup_replay.add(types.KeyboardButton(f'{course} –∫—É—Ä—Å'))
    
    item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup_replay.add(item_back)
    return markup_replay

def init_schedule(soup, conn):
    for number_group in group:
        link = soup.find('a', string=number_group)  
        if (link):
            link_href = link['href']
            file_url = f"https://portal.novsu.ru/{link_href}"
            response = requests.get(file_url)
            print(number_group)
            cur.execute(f'DROP TABLE IF EXISTS group_{number_group}');
            cur.execute(f'CREATE TABLE group_{number_group}(week_day VARCHAR(2) NOT NULL,'
                         'group_week_type BOOLEAN NOT NULL, group_data VARCHAR(1024) NOT NULL)')
            for day in days:
                schedule = init_schedule_ptk(number_group, day, response.content)
                if schedule != []:
                    init_send_schedule(schedule, number_group, day, "–í–µ—Ä—Ö–Ω—è—è", cur)
                    init_send_schedule(schedule, number_group, day, "–ù–∏–∂–Ω—è—è", cur)
            conn.commit()
    
def main():
    global cur
    
    #rebuild_db()
    conn = get_db_connection()
    cur = conn.cursor()
    
    url = 'https://portal.novsu.ru/univer/timetable/spo/'
    response = requests.get(url)
    html = response.text

    soup = BS(html, 'html.parser')
    #init_list_groups(soup, cur)
    conn.commit()

    init_get_list_group('groups_students_ptk', cur)
    init_get_list_group('groups_students_pedcol', cur)
    init_get_list_group('groups_students_medcol', cur)
    init_get_list_group('groups_students_spour', cur)
    init_get_list_group('groups_students_spoinpo', cur)
    
    fetch_group_ids(cur, 'groups_students_pedcol', group)
    fetch_group_ids(cur, 'groups_students_medcol', group)
    fetch_group_ids(cur, 'groups_students_spour', group)
    fetch_group_ids(cur, 'groups_students_spoinpo', group)
       
    #init_schedule(soup, conn)
    
    bot.polling()
    cur.close()
    conn.close()

if __name__ == '__main__':
    main()