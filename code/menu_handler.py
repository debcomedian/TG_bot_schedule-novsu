from telebot import types

from code.db import Database

def handle_geolocation(bot, message):
    markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_glav = types.KeyboardButton('–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å')
    item_ptk = types.KeyboardButton('–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–ª–ª–µ–¥–∂')
    item_anton = types.KeyboardButton('–ê–Ω—Ç–æ–Ω–æ–≤–æ')
    item_itys = types.KeyboardButton('–ò–¶–≠–£–°')
    item_ibhi = types.KeyboardButton('–ò–ë–•–ò')
    item_med = types.KeyboardButton('–ò–ú–û')
    item_ped = types.KeyboardButton('–ü–ò')
    item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup_replay.add(item_glav, item_ptk, item_anton, item_itys,
                      item_ibhi, item_med, item_ped, item_back)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç',
                     reply_markup=markup_replay)

def handle_location(bot, message, latitude, longitude, location_message):
    bot.send_location(message.chat.id, latitude, longitude)
    bot.send_message(message.chat.id, location_message)

def handle_schedule_request(bot, message):
    markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_PTK = types.KeyboardButton('–ü–¢–ö')
    item_MED = types.KeyboardButton('–ú–µ–¥.–∫–æ–ª–ª–µ–¥–∂')
    item_EKO = types.KeyboardButton('–°–ü–û –ò–¶–≠–£–°')
    item_IUR = types.KeyboardButton('–°–ü–û –ò–Æ–†')
    item_PED = types.KeyboardButton('–°–ü–û –ò–ù–ü–û')
    item_main = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup_replay.add(item_PTK, item_PED, item_IUR, item_MED, item_EKO).add(item_main)
    bot.send_message(message.chat.id, 'üè´–ö–∞–∫–æ–π –∫–æ–ª–ª–µ–¥–∂ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=markup_replay)

def handle_college_selection(bot, user_context, message, college_code, generate_course_menu):
    user_context[message.chat.id]['college'] = college_code
    markup_replay = generate_course_menu(college_code)
    bot.send_message(message.chat.id, '‚ùì –ö–∞–∫–æ–π –≤—ã –∫—É—Ä—Å?', reply_markup=markup_replay)

def handle_course_selection(bot, user_context, message, course, show_groups):
    current_context = user_context.get(message.chat.id, {})
    current_context['course'] = course
    selected_college = current_context.get('college')
    if selected_college == 'ptk':
        show_groups(message, 'groups_students_ptk')
    elif selected_college == 'spoinpo':
        show_groups(message, 'groups_students_spoinpo')

def handle_show_groups(bot, user_context, user_data, message, next_state):
    user_context[message.chat.id]['state'] = next_state
    markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if message.text[0].isdigit():
        user_data['course'] = message.text[0]  
        user_context[message.chat.id] = user_data
    
    course = user_data.get('course')
    college = user_data.get('college')
    
    conn = Database.get_connection()
    try:
        temp = Database.execute_query("SELECT group_id FROM groups_students_{} WHERE group_course=%s".format(college), (course,), fetch=True)
        
        temp_items = []
        for item in temp:
            temp_items.append(types.KeyboardButton(item[0]))
        
        markup_replay.add(*temp_items)
    finally:
        conn.close()
        
    markup_replay.add(types.KeyboardButton('–ù–∞–∑–∞–¥')).add(types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    bot.send_message(message.chat.id, 'üìù–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É', reply_markup=markup_replay)


def handle_group_selection(bot, user_context, message, group):
    user_context[message.chat.id]['group'] = group
    markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup_replay.add(types.KeyboardButton('–í–µ—Ä—Ö–Ω—è—è'), types.KeyboardButton('–ù–∏–∂–Ω—è—è'))
    markup_replay.add(types.KeyboardButton('–ù–∞–∑–∞–¥')).add(types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    bot.send_message(message.chat.id, '‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–µ–ª–∏', reply_markup=markup_replay)

def handle_week_selection(bot, user_context, message, week_type):
    user_context[message.chat.id]['week_type'] = week_type
    markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup_replay.add(*[types.KeyboardButton(day) for day in ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±']])
    markup_replay.add(types.KeyboardButton('–ù–∞–∑–∞–¥')).add(types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    bot.send_message(message.chat.id, 'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏', reply_markup=markup_replay)

def handle_display_schedule(bot, message, group, week_type, day, get_schedule_ptk):
    schedule = get_schedule_ptk(group, day, week_type)
    if schedule:
        bot.send_message(message.chat.id, f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}, –Ω–µ–¥–µ–ª—è - {week_type}, –≥—Ä—É–ø–ø–∞ - {group}:\n' + '\n'.join(schedule))
    else:
        bot.send_message(message.chat.id, '–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π')

def handle_main_menu(bot, message):
    markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_geolacation = types.KeyboardButton('–£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é')
    item_schedule = types.KeyboardButton('–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    markup_replay.add(item_schedule, item_geolacation)
    bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup_replay)

def handle_unknown(bot, user_state, message, STATE_MAIN_MENU):
    current_state = user_state.get(message.chat.id, {}).get('state', STATE_MAIN_MENU)
    markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if current_state != STATE_MAIN_MENU:
        item_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup_replay.add(item_back)
    item_main_menu = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup_replay.add(item_main_menu)
    
    bot.send_message(message.chat.id, '‚ö†Ô∏è–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.\nC–ªe–¥y–π—Çe –∫–Ω–æ–ø–∫–∞–º –º–µ–Ω—é!‚ö†Ô∏è',
                     reply_markup=markup_replay)

def handle_transition_with_context(bot, user_context, message, next_state, handler, *args):
    user_context[message.chat.id]['state'] = next_state
    handler(bot, user_context, message, *args)

def handle_transition_no_context(bot, user_context, message, next_state, handler, *args):
    user_context[message.chat.id]['state'] = next_state
    handler(bot, message, *args)
