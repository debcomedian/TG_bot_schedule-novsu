import pandas as pd

import psycopg2
import requests
import telebot
from bs4 import BeautifulSoup as BS
import xml.etree.ElementTree as ET
import tempfile
import os
import types
import asyncio
import aiohttp
from io import BytesIO
import xlrd
import re
from telebot import types

TOKEN = "6848210471:AAE98dRIf47eLHGfgqKFPN78TlXbKJKZClI"
bot = telebot.TeleBot(TOKEN)


group_student = None
day_of_week = None
week_type = None
college = None
course = None

user_context = {}
group = []
days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±']
days_full = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê']

def init_list_group(cur, soup):
    substring_ptk = "/npe/files/_timetable/ptk/"
    substring_pedcol = "/npe/files/_timetable/pedcol/"
    substring_medcol = "/npe/files/_timetable/medcol/"
    substring_spour = "/npe/files/_timetable/spour/"
    substring_spoinpo = "/npe/files/_timetable/spoinpo/"
    
    list_group_ptk, list_group_pedcol, list_group_medcol = [], [], []
    list_group_spour, list_group_spoinpo = [], []
    list_groups = soup.find_all('a')
    for element in list_groups:  
        if substring_ptk in str(element):
            if '_' not in element.get_text():
                list_group_ptk.append(element.get_text())
        elif substring_pedcol in str(element):
            list_group_pedcol.append(element.get_text())
        elif substring_medcol in str(element):
            list_group_medcol.append(element.get_text())
        elif substring_spour in str(element):
            list_group_spour.append(element.get_text())
        elif substring_spoinpo in str(element):
            list_group_spoinpo.append(element.get_text())
            
    course = 1
    first_group_number = int(list_group_ptk[0]) // 1000
    for num_group in list_group_ptk:
        num_group = int(num_group)
        temp = num_group // 1000;
        if (first_group_number != temp):
            course += 1
            first_group_number = temp
        cur.execute('INSERT INTO groups_students_ptk VALUES (%s, %s)', (course, num_group))

def init_find_distance(group_student, day_of_week, df):
    #–ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    col_index = next((col for col in df.columns if any(day in df[col].values for day in days_full)), None)
    if col_index is not None:
        # –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
        days_of_week = {'–ü–ù': '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢': '–í–¢–û–†–ù–ò–ö', '–°–†': '–°–†–ï–î–ê',
                        '–ß–¢': '–ß–ï–¢–í–ï–†–ì', '–ü–¢': '–ü–Ø–¢–ù–ò–¶–ê', '–°–ë': '–°–£–ë–ë–û–¢–ê'}
        day_indices = {day: [] for day in days_of_week.values()}
        
        for index, value in enumerate(df[col_index]):
            if value in days_of_week.values():
                day_indices[value].append(index)

        if day_of_week.upper() in days_of_week:
            current_day = days_of_week[day_of_week.upper()]
            next_day = days_of_week.get(init_get_next_weekday(day_of_week.upper()), None)

            if next_day is not None:
                if len(day_indices[current_day]) > 0 and len(day_indices[next_day]) > 0:
                    distance = day_indices[next_day][0] - day_indices[current_day][-1]
                    return distance
    return 0

def init_get_next_weekday(days):
    days_of_week = ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë']
    current_day_index = days_of_week.index(days)
    return days_of_week[(current_day_index + 1) % len(days_of_week)]

def init_get_df(content):
    with tempfile.NamedTemporaryFile(delete=True) as tmp_file:
        tmp_file.write(content)
        tmp_file.seek(0)
        df = pd.read_excel(tmp_file)
    return df

def init_schedule_ptk(group_student, day_of_week, content):

    df = init_get_df(content)
    day_of_week_values = {'–ü–Ω': '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í—Ç': '–í–¢–û–†–ù–ò–ö', '–°—Ä': '–°–†–ï–î–ê',
                          '–ß—Ç': '–ß–ï–¢–í–ï–†–ì', '–ü—Ç': '–ü–Ø–¢–ù–ò–¶–ê', '–°–±': '–°–£–ë–ë–û–¢–ê'}
    row_index = None
    for row_idx, row in df.iterrows():
        for col_idx, cell in enumerate(row):
            if cell == day_of_week_values.get(day_of_week):
                row_index = row_idx
                break
        if row_index is not None:
            break

    column_index = None
    for column_index, column_name in enumerate(df.columns):
        if group_student in df[column_name].values:
            break

    schedule = []
    #print(f'group_student --> {group_student}\nday_os_week --> {day_of_week}\n')
    for i in range(init_find_distance(group_student, day_of_week, df)):
        time = df.iloc[row_index + i, column_index - 1]
        info = df.iloc[row_index + i, column_index]
        timeN = df.iloc[row_index + i - 1, column_index - 1]
        info = remove_lek_from_info(info)
        #print(info)
        # –û–±—ã—á–Ω–∞—è –Ω–µ–¥–µ–ª—è –±–µ–∑ –≤–µ—Ä—Ö–∞ –Ω–∏–∑–∞:

        if pd.notna(time) and pd.notna(info):
            # –ü—Ä–µ–¥–º–µ—Ç –±–µ–∑ –≥—Ä—É–ø–ø
            if len(info.split(', ')) == 3:
                subject, teacher, audience = info.split(', ')
                schedule.append(
                    f' ‚è∞–í—Ä–µ–º—è: {time} \n üìö–ü—Ä–µ–¥–º–µ—Ç: {subject} \nüë®‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher} \n üìù–ê—É–¥–∏—Ç–æ—Ä–∏—è: {audience}\n\n')
            # –ü—Ä–µ–¥–º–µ—Ç –ø–æ –≥—Ä—É–ø–ø–∞–º:
            elif len(info.split(', ')) == 5:
                subject, teacher1, audience1, teacher2, audience2 = info.split(', ')
                if pd.notna(time) and pd.notna(info):
                    schedule.append(
                        f' üìö–ü—Ä–µ–¥–º–µ—Ç: {subject} \n'
                        f' –ì—Ä—É–ø–ø–∞ 1: \n ‚è∞–í—Ä–µ–º—è: {time} \n üë®‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher1} \n üìù–ê—É–¥–∏—Ç–æ—Ä–∏—è: {audience1} \n\n' +
                        f' –ì—Ä—É–ø–ø–∞ 2: \n ‚è∞–í—Ä–µ–º—è: {time} \n üë®‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher2} \n üìù–ê—É–¥–∏—Ç–æ—Ä–∏—è: {audience2} \n\n')
    
        # –ï—Å–ª–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ä—Ö–Ω–∏–π –Ω–∏–∂–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç:

        elif pd.isna(time) and pd.notna(info):
            # –ü—Ä–µ–¥–º–µ—Ç –±–µ–∑ –≥—Ä—É–ø–ø –Ω–∏–∂–Ω–µ–π –Ω–µ–¥–µ–ª–∏:
            if len(info.split(', ')) == 3:
                subject, teacher, audience = info.split(', ')
                schedule.append(
                    f' ‚è∞–í—Ä–µ–º—è: {timeN} \n –ü—Ä–µ–¥–º–µ—Ç: {subject} \n –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher} \n –ê—É–¥–∏—Ç–æ—Ä–∏—è: {audience} - —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∏–∂–Ω–µ–π –Ω–µ–¥–µ–ª–µ \n\n')
            # –ü—Ä–µ–¥–º–µ—Ç –ø–æ –≥—Ä—É–ø–ø–∞–º –Ω–∏–∂–Ω–µ–π –Ω–µ–¥–µ–ª–∏:
            elif len(info.split(', ')) == 5:
                subject1, teacher1, audience1, subject2, teacher2, audience2 = info.split(', ')
                if pd.notna(time) and pd.notna(info):
                    schedule.append(
                        f' –ì—Ä—É–ø–ø–∞ 1: \n ‚è∞–í—Ä–µ–º—è: {time} \n üìö–ü—Ä–µ–¥–º–µ—Ç: {subject1} \n üë®‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher1} \n üìù–ê—É–¥–∏—Ç–æ—Ä–∏—è: {audience1} - —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∏–∂–Ω–µ–π –Ω–µ–¥–µ–ª–µ \n\n' +
                        f' –ì—Ä—É–ø–ø–∞ 2: \n ‚è∞–í—Ä–µ–º—è: {time} \n üìö–ü—Ä–µ–¥–º–µ—Ç: {subject2} \n üë®‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher2} \n üìù–ê—É–¥–∏—Ç–æ—Ä–∏—è: {audience2} - —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∏–∂–Ω–µ–π –Ω–µ–¥–µ–ª–µ \n\n')
                    
    return schedule

def init_send_schedule(schedule, cur, number_group, day, week_type):
    for i, elem in enumerate(schedule):
        if ' - —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∏–∂–Ω–µ–π –Ω–µ–¥–µ–ª–µ' in elem:
            schedule[i - 1] = schedule[i - 1].rstrip('\n\n')
            schedule[i - 1] += ' - —Ç–æ–ª—å–∫–æ –ø–æ –≤–µ—Ä—Ö–Ω–µ–π –Ω–µ–¥–µ–ª–µ \n\n'

    for i, elem in enumerate(schedule):
        if week_type == '–í–µ—Ä—Ö–Ω—è—è':
            if ' - —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∏–∂–Ω–µ–π –Ω–µ–¥–µ–ª–µ' in elem:
                del schedule[i]
        elif week_type == '–ù–∏–∂–Ω—è—è':
            if ' - —Ç–æ–ª—å–∫–æ –ø–æ –≤–µ—Ä—Ö–Ω–µ–π –Ω–µ–¥–µ–ª–µ' in elem:
                del schedule[i]
    cur.execute(f'INSERT INTO group_{number_group} VALUES (%s, %s, %s)', (day, week_type == "–í–µ—Ä—Ö–Ω—è—è", ''.join(schedule)))

def init_db():
    global group
    
    conn = psycopg2.connect(dbname='novsu_schedule', user='postgres',
                            password='debadmin', host='localhost')
    cur = conn.cursor()
    cur.execute('DROP TABLE IF EXISTS groups_students_ptk;'
                'DROP TABLE IF EXISTS groups_students_pedcol;'
                'DROP TABLE IF EXISTS groups_students_medcol;'
                'DROP TABLE IF EXISTS groups_students_spour;'
                'DROP TABLE IF EXISTS groups_students_spoinpo;'
                'CREATE TABLE groups_students_ptk'
                '(group_course SMALLINT NOT NULL, group_id SMALLINT NOT NULL);'
                'CREATE TABLE groups_students_pedcol' 
                '(group_course SMALLINT NOT NULL, group_id SMALLINT NOT NULL);'
                'CREATE TABLE groups_students_medcol' 
                '(group_course SMALLINT NOT NULL, group_id SMALLINT NOT NULL);'
                'CREATE TABLE groups_students_spour'
                '(group_course SMALLINT NOT NULL, group_id SMALLINT NOT NULL);'
                'CREATE TABLE groups_students_spoinpo'
                '(group_course SMALLINT NOT NULL, group_id SMALLINT NOT NULL);');
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å HTTP-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–π—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å HTML-–∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    url = 'https://portal.novsu.ru/univer/timetable/spo/'
    response = requests.get(url)
    html = response.text

    soup = BS(html, 'html.parser')
    init_list_group(cur, soup)
    conn.commit()
    
    cur.execute('SELECT group_id FROM groups_students_ptk')
    temp = cur.fetchall()
    group = []
    for item in temp:
        group.append(str(item[0]))
            
    for number_group in group:
        link = soup.find('a', string="0" + str(number_group) if (int(number_group) < 1000) else number_group)  
        if (link):
            link_href = link['href']
            file_url = f"https://portal.novsu.ru/{link_href}"
            response = requests.get(file_url)
            print(number_group)
            cur.execute(f'DROP TABLE IF EXISTS group_{number_group}');
            cur.execute(f'CREATE TABLE group_{number_group}(week_day VARCHAR(2) NOT NULL,'
                         'group_week_type BOOLEAN NOT NULL, group_data VARCHAR(1024) NOT NULL)')
            for day in days:
                schedule = init_schedule_ptk(number_group, day, response.content)
                if schedule != []:
                    init_send_schedule(schedule, cur, number_group, day, "–í–µ—Ä—Ö–Ω—è—è")
                    init_send_schedule(schedule, cur, number_group, day, "–ù–∏–∂–Ω—è—è")
            conn.commit()
    cur.close()
    conn.close()
         
@bot.message_handler(commands=['start'])
def main_menu(message):
    markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_geolacation = types.KeyboardButton('–£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é')
    item_schedule = types.KeyboardButton('–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    markup_replay.add(item_schedule, item_geolacation)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?',
                     reply_markup=markup_replay)


@bot.message_handler(content_types=['text'])
def bot_massage(message):
    global group
    if message.chat.type == 'private':
        if '–£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é' in message.text:
            markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_glav = types.KeyboardButton('–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å')
            item_ptk = types.KeyboardButton('–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–ª–ª–µ–¥–∂')
            item_anton = types.KeyboardButton('–ê–Ω—Ç–æ–Ω–æ–≤–æ')
            item_itys = types.KeyboardButton('–ò–¶–≠–£–°')
            item_ibhi = types.KeyboardButton('–ò–ë–•–ò')
            item_med = types.KeyboardButton('–ò–ú–û')
            item_ped = types.KeyboardButton('–ü–ò')
            item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_replay.add(item_glav, item_ptk, item_anton, item_itys,
                              item_ibhi, item_med, item_ped, item_back)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç',
                             reply_markup=markup_replay)

        elif message.text == '–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å':
            latitude = 58.542306
            longitude = 31.261174
            bot.send_location(message.chat.id, latitude, longitude)
            bot.send_message(message.chat.id, 'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ì–ª–∞–≤–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞: –ë–æ–ª—å—à–∞—è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∞—è, 41')

        elif message.text == '–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–ª–ª–µ–¥–∂':
            latitude = 58.541668
            longitude = 31.264534
            bot.send_location(message.chat.id, latitude, longitude)
            bot.send_message(message.chat.id, 'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ü–¢–ö: –ë–æ–ª—å—à–∞—è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∞—è, 46')

        elif message.text == '–ê–Ω—Ç–æ–Ω–æ–≤–æ':
            latitude = 58.541079
            longitude = 31.288108
            bot.send_location(message.chat.id, latitude, longitude)
            bot.send_message(message.chat.id, 'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ò–ì–£–ú: —Ä–∞–π–æ–Ω –ê–Ω—Ç–æ–Ω–æ–≤–æ, 1')

        elif message.text == '–ò–¶–≠–£–°':
            latitude = 58.522347
            longitude = 31.258228
            bot.send_location(message.chat.id, latitude, longitude)
            bot.send_message(message.chat.id, 'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ò–¶–≠–£–°: –ü—Å–∫–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 3')

        elif message.text == '–ò–ú–û':
            latitude = 58.542809
            longitude = 31.310567
            bot.send_location(message.chat.id, latitude, longitude)
            bot.send_message(message.chat.id, 'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ò–ú–û: —É–ª–∏—Ü–∞ –î–µ—Ä–∂–∞–≤–∏–Ω–∞, 6')

        elif message.text == '–ò–ë–•–ò':
            latitude = 58.551745
            longitude = 31.300628
            bot.send_location(message.chat.id, latitude, longitude)
            bot.send_message(message.chat.id, 'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ò–ë–•–ò: —É–ª–∏—Ü–∞ –°–æ–≤–µ—Ç—Å–∫–æ–π –ê—Ä–º–∏–∏, 7')

        elif message.text == '–ü–ò':
            latitude = 58.523945
            longitude = 31.262243
            bot.send_location(message.chat.id, latitude, longitude)
            bot.send_message(message.chat.id, 'üìç–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ü–ò: —É–ª–∏—Ü–∞ –ß–µ—Ä–Ω—è—Ö–æ–≤—Å–∫–æ–≥–æ, 64/6')

        elif message.text == '–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_PTK = types.KeyboardButton('–ü–¢–ö')
            item_MED = types.KeyboardButton('–ú–µ–¥.–∫–æ–ª–ª–µ–¥–∂')
            item_EKO = types.KeyboardButton('–°–ü–û –ò–¶–≠–£–°')
            item_IUR = types.KeyboardButton('–°–ü–û –ò–Æ–†')
            item_PED = types.KeyboardButton('–°–ü–û –ò–ù–ü–û')
            item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_replay.add(item_PTK, item_PED, item_IUR, item_MED, item_EKO, item_back)
            bot.send_message(message.chat.id, 'üè´–ö–∞–∫–æ–π –∫–æ–ª–ª–µ–¥–∂ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                             reply_markup=markup_replay)

        elif message.text == '–ü–¢–ö':
            user_context[message.chat.id] = '–ü–¢–ö'
            markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_1 = types.KeyboardButton('1 –∫—É—Ä—Å')
            item_2 = types.KeyboardButton('2 –∫—É—Ä—Å')
            item_3 = types.KeyboardButton('3 –∫—É—Ä—Å')
            item_4 = types.KeyboardButton('4 –∫—É—Ä—Å')
            item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            global college
            college = message.text
            global course
            course = message.text
            markup_replay.add(item_1, item_2, item_3, item_4, item_back)
            bot.send_message(message.chat.id, '‚ùì –ö–∞–∫–æ–π –≤—ã –∫—É—Ä—Å?', reply_markup=markup_replay)

        elif message.text == '–°–ü–û –ò–ù–ü–û':
            user_context[message.chat.id] = '–°–ü–û –ò–ù–ü–û'
            markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_1 = types.KeyboardButton('1 –∫—É—Ä—Å')
            item_2 = types.KeyboardButton('2 –∫—É—Ä—Å')
            item_3 = types.KeyboardButton('3 –∫—É—Ä—Å')
            item_4 = types.KeyboardButton('4 –∫—É—Ä—Å')
            item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

            college = message.text
            course = message.text
            markup_replay.add(item_1, item_2, item_3, item_4, item_back)
            bot.send_message(message.chat.id, '‚ùì –ö–∞–∫–æ–π –≤—ã –∫—É—Ä—Å?', reply_markup=markup_replay)

        elif message.text == '1 –∫—É—Ä—Å':
            current_context = user_context.get(message.chat.id)
            if current_context == '–ü–¢–ö':
                markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)

                item_3781 = types.KeyboardButton('3781')
                item_3782 = types.KeyboardButton('3782')
                item_3791 = types.KeyboardButton('3791')
                item_3792 = types.KeyboardButton('3792')
                item_3911 = types.KeyboardButton('3911')
                item_3912 = types.KeyboardButton('3912')
                item_3913 = types.KeyboardButton('3913')
                item_3914 = types.KeyboardButton('3914')
                item_3921 = types.KeyboardButton('3921')
                item_3951 = types.KeyboardButton('3951')
                item_3952 = types.KeyboardButton('3952')
                item_3953 = types.KeyboardButton('3953')
                item_3954 = types.KeyboardButton('3954')
                item_3955 = types.KeyboardButton('3955')
                item_3981 = types.KeyboardButton('3981')
                item_3982 = types.KeyboardButton('3982')
                item_3983 = types.KeyboardButton('3983')
                item_3990 = types.KeyboardButton('3990')
                item_3991 = types.KeyboardButton('3991')
                item_3992 = types.KeyboardButton('3992')
                item_3993 = types.KeyboardButton('3993')
                item_3994 = types.KeyboardButton('3994')
                item_3995 = types.KeyboardButton('3995')
                item_3996 = types.KeyboardButton('3996')
                item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                global group_student
                group_student = message.text

                markup_replay.add(item_3781, item_3782, item_3791, item_3792,
                                  item_3911, item_3912, item_3913, item_3914,
                                  item_3921, item_3951, item_3952, item_3953,
                                  item_3954, item_3955, item_3981, item_3982,
                                  item_3983, item_3990, item_3991, item_3992,
                                  item_3993, item_3994, item_3995, item_3996,
                                  item_back)
                bot.send_message(message.chat.id, 'üìù–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É',
                                 reply_markup=markup_replay)

            elif current_context == '–°–ü–û –ò–ù–ü–û':
                markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item_3861 = types.KeyboardButton('3861')
                item_3971 = types.KeyboardButton('3971')
                item_3972 = types.KeyboardButton('3972')
                item_3973 = types.KeyboardButton('3973')
                item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                group_student = message.text
                markup_replay.add(item_3861, item_3971, item_3972, item_3973, item_back)
                bot.send_message(message.chat.id, 'üìù–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É',
                                 reply_markup=markup_replay)

        elif message.text == '2 –∫—É—Ä—Å':
            current_context = user_context.get(message.chat.id)
            if current_context == '–ü–¢–ö':
                markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item_2781 = types.KeyboardButton('2781')
                item_2782 = types.KeyboardButton('2782')
                item_2791 = types.KeyboardButton('2791')
                item_2792 = types.KeyboardButton('2792')
                item_2911 = types.KeyboardButton('2911')
                item_2912 = types.KeyboardButton('2912')
                item_2913 = types.KeyboardButton('2913')
                item_2921 = types.KeyboardButton('2921')
                item_2951 = types.KeyboardButton('2951')
                item_2952 = types.KeyboardButton('2952')
                item_2953 = types.KeyboardButton('2953')
                item_2981 = types.KeyboardButton('2981')
                item_2982 = types.KeyboardButton('2982')
                item_2983 = types.KeyboardButton('2983')
                item_2991 = types.KeyboardButton('2991')
                item_2992 = types.KeyboardButton('2992')
                item_2993 = types.KeyboardButton('2993')
                item_2994 = types.KeyboardButton('2994')
                item_2995 = types.KeyboardButton('2995')
                item_2996 = types.KeyboardButton('2996')
                item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                group_student = message.text

                markup_replay.add(item_2781, item_2782, item_2791, item_2792,
                                  item_2911, item_2912, item_2913, item_2921,
                                  item_2951, item_2952, item_2953, item_2981,
                                  item_2982, item_2983, item_2991, item_2992,
                                  item_2993, item_2994, item_2995, item_2996,
                                  item_back)
                bot.send_message(message.chat.id, 'üìù–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É.',
                                 reply_markup=markup_replay)

            elif current_context == '–°–ü–û –ò–ù–ü–û':
                markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item_2861 = types.KeyboardButton('2861')
                item_2862 = types.KeyboardButton('2862')
                item_2863 = types.KeyboardButton('2863')
                item_2971 = types.KeyboardButton('2971')
                item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                group_student = message.text
                markup_replay.add(item_2861, item_2862, item_2863, item_2971, item_back)

                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É.',
                                 reply_markup=markup_replay)

        elif message.text == '3 –∫—É—Ä—Å':
            current_context = user_context.get(message.chat.id)
            if current_context == '–ü–¢–ö':
                markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item_1791 = types.KeyboardButton('1791')
                item_1792 = types.KeyboardButton('1792')
                item_1911 = types.KeyboardButton('1911')
                item_1921 = types.KeyboardButton('1921')
                item_1951 = types.KeyboardButton('1951')
                item_1952 = types.KeyboardButton('1952')
                item_1981 = types.KeyboardButton('1981')
                item_1991 = types.KeyboardButton('1991')
                item_1992 = types.KeyboardButton('1992')
                item_1994 = types.KeyboardButton('1994')
                item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                group_student = message.text

                markup_replay.add(item_1791, item_1792, item_1911, item_1921,
                                  item_1951, item_1952, item_1981, item_1991,
                                  item_1992, item_1994, item_back)
                bot.send_message(message.chat.id, 'üìù–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É.',
                                 reply_markup=markup_replay)

            elif current_context == '–°–ü–û –ò–ù–ü–û':
                markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item_1861 = types.KeyboardButton('2861')
                item_1862 = types.KeyboardButton('2862')
                item_1971 = types.KeyboardButton('2971')
                item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                group_student = message.text
                markup_replay.add(item_1861, item_1862, item_1971, item_back)
                bot.send_message(message.chat.id, 'üìù–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É.',
                                 reply_markup=markup_replay)

        elif message.text == '4 –∫—É—Ä—Å':
            current_context = user_context.get(message.chat.id)
            if current_context == '–ü–¢–ö':
                markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item_0901 = types.KeyboardButton('0901')
                item_0902 = types.KeyboardButton('0902')
                item_0911 = types.KeyboardButton('0911')
                item_0921 = types.KeyboardButton('0921')
                item_0931 = types.KeyboardButton('0931')
                item_0941 = types.KeyboardButton('0941')
                item_0951 = types.KeyboardButton('0951')
                item_0952 = types.KeyboardButton('0952')
                item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                group_student = message.text
                markup_replay.add(item_0901, item_0902, item_0911, item_0921,
                                  item_0931, item_0941, item_0951, item_0952,
                                  item_back)
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É.',
                                 reply_markup=markup_replay)

            elif current_context == '–°–ü–û –ò–ù–ü–û':
                markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item_0861 = types.KeyboardButton('0861')
                item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                group_student = message.text
                markup_replay.add(item_0861, item_back)
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É.',
                                 reply_markup=markup_replay)


        elif message.text == '–ú–µ–¥.–∫–æ–ª–ª–µ–¥–∂':
            markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            '''item_1 = types.KeyboardButton('1 –∫—É—Ä—Å')
            item_2 = types.KeyboardButton('2 –∫—É—Ä—Å')
            item_3 = types.KeyboardButton('3 –∫—É—Ä—Å')
            item_4 = types.KeyboardButton('4 –∫—É—Ä—Å')'''
            item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_replay.add(item_back)
            bot.send_message(message.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.',
                             reply_markup=markup_replay)1

        elif message.text == '–°–ü–û –ò–¶–≠–£–°':
            markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            '''item_1 = types.KeyboardButton('1 –∫—É—Ä—Å')
            item_2 = types.KeyboardButton('2 –∫—É—Ä—Å')
            item_3 = types.KeyboardButton('3 –∫—É—Ä—Å')
            item_4 = types.KeyboardButton('4 –∫—É—Ä—Å')'''
            item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_replay.add(item_back)
            bot.send_message(message.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.',
                             reply_markup=markup_replay)

        elif message.text == '–°–ü–û –ò–Æ–†':
            markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            '''item_1 = types.KeyboardButton('1 –∫—É—Ä—Å')
            item_2 = types.KeyboardButton('2 –∫—É—Ä—Å')
            item_3 = types.KeyboardButton('3 –∫—É—Ä—Å')
            item_4 = types.KeyboardButton('4 –∫—É—Ä—Å')'''
            item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_replay.add(item_back)
            bot.send_message(message.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.',
                             reply_markup=markup_replay)

        elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_geolacation = types.KeyboardButton('–£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é')
            item_schedule = types.KeyboardButton('–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            markup_replay.add(item_schedule, item_geolacation)
            bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                             reply_markup=markup_replay)


        elif message.text.isdigit():
            if message.text in group:
                group_student = message.text
                markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item_pn = types.KeyboardButton('–í–µ—Ä—Ö–Ω—è—è')
                item_vt = types.KeyboardButton('–ù–∏–∂–Ω—è—è')
                item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                markup_replay.add(item_pn, item_vt, item_back)
                bot.send_message(message.chat.id, '‚ùóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é',
                                 reply_markup=markup_replay)
            else:
                bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')

        elif message.text == '–í–µ—Ä—Ö–Ω—è—è':
            markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_pn = types.KeyboardButton('–ü–Ω')
            item_vt = types.KeyboardButton('–í—Ç')
            item_sr = types.KeyboardButton('–°—Ä')
            item_ch = types.KeyboardButton('–ß—Ç')
            item_pt = types.KeyboardButton('–ü—Ç')
            item_sb = types.KeyboardButton('–°–±')
            item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            global week_type
            week_type = message.text

            markup_replay.add(item_pn, item_vt, item_sr, item_ch,
                              item_pt, item_sb, item_back)
            bot.send_message(message.chat.id, 'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                             reply_markup=markup_replay)

        elif message.text == '–ù–∏–∂–Ω—è—è':
            markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_pn = types.KeyboardButton('–ü–Ω')
            item_vt = types.KeyboardButton('–í—Ç')
            item_sr = types.KeyboardButton('–°—Ä')
            item_ch = types.KeyboardButton('–ß—Ç')
            item_pt = types.KeyboardButton('–ü—Ç')
            item_sb = types.KeyboardButton('–°–±')
            week_type = message.text
            item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_replay.add(item_pn, item_vt, item_sr, item_ch,
                              item_pt, item_sb, item_back)
            bot.send_message(message.chat.id, 'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                             reply_markup=markup_replay)

        elif message.text in days:
            day_of_week = message.text
            print(college)
            if college == '–ü–¢–ö':
                schedule = get_schedule_ptk(group_student, day_of_week, week_type)
                if schedule is None:
                    bot.send_message(message.chat.id, '–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π')
                else:
                    bot.send_message(message.chat.id, f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_of_week}, –Ω–µ–¥–µ–ª—è - {week_type}, –≥—Ä—É–ø–ø–∞ -  {group_student}:\n' + '\n'.join(schedule))
            elif college == '–°–ü–û –ò–ù–ü–û':
                print('–ò–ù–ü–û')

        else:
            markup_replay = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_replay.add(item_back)
            bot.send_message(message.chat.id, '‚ö†Ô∏è–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.\n–°–ª–µ–¥—É–π—Ç–µ –∫–Ω–æ–ø–∫–∞–º –º–µ–Ω—é!‚ö†Ô∏è',
                             reply_markup=markup_replay)



def remove_lek_from_info(info):
    if isinstance(info, str) and ',' in info:
        parts = info.split(', ')
        if len(parts) > 3:
            return ', '.join(parts[:3])
    return info


def get_schedule_ptk(group_student, day_of_week, week_type):
    conn = psycopg2.connect(dbname='novsu_schedule', user='postgres',
                            password='debadmin', host='localhost')
    cur = conn.cursor()
    cur.execute(f'SELECT group_data FROM group_{group_student} WHERE week_day=\'{day_of_week}\' AND group_week_type={week_type=="–í–µ—Ä—Ö–Ω—è—è"}')
    shedule = cur.fetchone()
    
    conn.commit()
    cur.close()
    conn.close()
    return shedule
    
def get_schedule_inpo(group_number_ptk, day_of_week_ptk, week_type):
    print('Get_schedule start')
    df = get_file_schedule_PTK(group_number_ptk)
    print('valid groups getting')
    # –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≥—Ä—É–ø–ø

    valid_groups = [df.iloc[0, 3], df.iloc[0, 9], df.iloc[0, 15]]
    print('–ì—Ä—É–ø–ø—ã: ' + str(valid_groups))
    print('day of week getting')
    print(day_of_week_ptk)
    # –í—ã–±—Ä–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏


    if group_number_ptk in valid_groups[0]:
        column_index = 2
    elif group_number_ptk in valid_groups[1]:
        column_index = 6
    elif group_number_ptk in valid_groups[2]:
        column_index = 9
    elif group_number_ptk in valid_groups[3]:
        column_index = 12
    print('Get_schedule done')

    time = df.iloc[1:11, column_index].tolist()
    new_time = []
    for item in time:
        if not pd.isna(item):
            new_time.append(item)
    time = new_time

    time1 = time[0]
    time2 = time[1]
    time3 = time[2]
    time4 = time[3]
    time5 = time[4]
    print(time1, time2, time3, time4, time5)

    if day_of_week_ptk == '–ü–Ω':
        row_index = 11

        subjects = df.iloc[1:row_index, column_index + 1].tolist()

        new_subjects = []
        prev_subject = None
        for i, subject in enumerate(subjects):
            if not pd.isna(subject):
                prev_subject = subject
            elif i == len(subjects) - 1 or (pd.isna(prev_subject) and new_subjects and new_subjects[
                -1] is not None):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è nan –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–µ-nan —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫
                new_subjects.append(None)
            elif pd.isna(
                    prev_subject) and i > 0:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è nan –∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º
                continue
            else:
                new_subjects.append(prev_subject)

        subjects = new_subjects
        print(subjects)

        teachers = df.iloc[1:row_index, column_index+4].tolist()
        print(teachers)

        auditors = df.iloc[1:row_index, column_index+6].tolist()
        print(auditors)

    elif day_of_week_ptk == '–í—Ç':
        row_index = 21

        subjects = df.iloc[11:row_index, column_index + 1].tolist()
        print(subjects)

        new_subjects = []
        prev_subject = None
        for i, subject in enumerate(subjects):
            if not pd.isna(subject):
                prev_subject = subject
            elif i == len(subjects) - 1 or (pd.isna(prev_subject) and new_subjects and new_subjects[
                -1] is not None):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è nan –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–µ-nan —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫
                new_subjects.append(None)
            elif pd.isna(
                    prev_subject) and i > 0:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è nan –∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º
                continue
            else:
                new_subjects.append(prev_subject)

        subjects = new_subjects
        print(subjects)

        teachers = df.iloc[11:row_index, column_index+4].tolist()
        print(teachers)

        auditors = df.iloc[11:row_index, column_index+6].tolist()
        print(auditors)
    elif day_of_week_ptk == '–°—Ä':
        row_index = 31

        subjects = df.iloc[21:row_index, column_index + 1].tolist()
        print(subjects)

        new_subjects = []
        prev_subject = None
        for i, subject in enumerate(subjects):
            if not pd.isna(subject):
                prev_subject = subject
            elif i == len(subjects) - 1 or (pd.isna(prev_subject) and new_subjects and new_subjects[
                -1] is not None):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è nan –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–µ-nan —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫
                new_subjects.append(None)
            elif pd.isna(
                    prev_subject) and i > 0:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è nan –∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º
                continue
            else:
                new_subjects.append(prev_subject)

        subjects = new_subjects
        print(subjects)

        teachers = df.iloc[21:row_index, column_index+4].tolist()
        print(teachers)

        auditors = df.iloc[21:row_index, column_index+6].tolist()
        print(auditors)
    elif day_of_week_ptk == '–ß—Ç':
        row_index = 41

        subjects = df.iloc[31:row_index, column_index + 1].tolist()
        print(subjects)

        new_subjects = []
        prev_subject = None
        for i, subject in enumerate(subjects):
            if not pd.isna(subject):
                prev_subject = subject
            elif i == len(subjects) - 1 or (pd.isna(prev_subject) and new_subjects and new_subjects[
                -1] is not None):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è nan –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–µ-nan —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫
                new_subjects.append(None)
            elif pd.isna(
                    prev_subject) and i > 0:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è nan –∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º
                continue
            else:
                new_subjects.append(prev_subject)

        subjects = new_subjects
        print(subjects)

        teachers = df.iloc[31:row_index, column_index+4].tolist()
        print(teachers)

        auditors = df.iloc[31:row_index, column_index+6].tolist()
        print(auditors)
    elif day_of_week_ptk == '–ü—Ç':
        row_index = 51

        subjects = df.iloc[41:row_index, column_index + 1].tolist()
        print(subjects)

        new_subjects = []
        prev_subject = None
        for i, subject in enumerate(subjects):
            if not pd.isna(subject):
                prev_subject = subject
            elif i == len(subjects) - 1 or (pd.isna(prev_subject) and new_subjects and new_subjects[
                -1] is not None):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è nan –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–µ-nan —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫
                new_subjects.append(None)
            elif pd.isna(
                    prev_subject) and i > 0:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è nan –∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º
                continue
            else:
                new_subjects.append(prev_subject)

        subjects = new_subjects
        print(subjects)

        teachers = df.iloc[41:row_index, column_index+4].tolist()
        print(teachers)

        auditors = df.iloc[41:row_index, column_index+6].tolist()
        print(auditors)
    elif day_of_week_ptk == '–°–±':
        row_index = 65

        subjects = df.iloc[51:row_index, column_index + 1].tolist()
        print(subjects)

        new_subjects = []
        prev_subject = None
        for i, subject in enumerate(subjects):
            if not pd.isna(subject):
                prev_subject = subject
            elif i == len(subjects) - 1 or (pd.isna(prev_subject) and new_subjects and new_subjects[
                -1] is not None):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è nan –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–µ-nan —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫
                new_subjects.append(None)
            elif pd.isna(prev_subject) and i > 0 and subjects[i - 1] == subjects[
                i - 2]:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è nan –∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–µ-nan —ç–ª–µ–º–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è
                continue
            else:
                new_subjects.append(prev_subject)

        subjects = new_subjects
        print(subjects)


        teachers = df.iloc[51:row_index, column_index+4].tolist()
        print(teachers)

        auditors = df.iloc[51:row_index, column_index+6].tolist()
        print(auditors)

if __name__ == '__main__':
    init_db()
    bot.polling()
